@using GymLog.Web.Exercises.Dtos
@using GymLog.Web.Exercises.Requests
<div class="container">
    <EditForm Model="@_createExerciseRequest" OnValidSubmit="@CreateAsync">
        <DataAnnotationsValidator/>

        <div class="row">
            <div class="col-12">
                <label for="name" class="form-label">Name:</label>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <InputText @bind-Value="@_createExerciseRequest.Name" type="text" class="form-control" id="name"/>
                <ValidationMessage For="@(() => _createExerciseRequest.Name)"/>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <label for="category" class="form-label">Category</label>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <InputSelect @bind-Value="@_createExerciseRequest.Category" class="form-select" id="category">
                    @foreach (string category in Enum.GetNames(typeof(ExerciseCategory)))
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => _createExerciseRequest.Category)"/>
            </div>
        </div>

        <hr/>

        <div class="row">
            <div class="col">
                <button type="submit" class="btn btn-primary">Confirm</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelAsync">Cancel</button>
            </div>
        </div>
    </EditForm>
</div>

@code {

    [Inject] public IToastService ToastService { get; set; } = default!;

    [CascadingParameter] public BlazoredModalInstance BlazoredModalInstance { get; set; } = default!;

    private readonly CreateExerciseRequest _createExerciseRequest = new();

    private async Task CreateAsync()
    {
        await BlazoredModalInstance.CloseAsync(ModalResult.Ok(_createExerciseRequest));
    }

    private async Task CancelAsync()
    {
        await BlazoredModalInstance.CancelAsync();
    }

}