@page "/"
@using GymLog.Web.Workouts.Dtos
@using GymLog.Web.Workouts.Requests
@using GymLog.Web.Workouts.Services

<PageTitle>GymLog - Home</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <InputSelect id="selectDate" Value="@_date" ValueExpression="() => _date" ValueChanged="(DateTime value) => OnDateChangedAsync(value)" class="form-select" style="width: 14rem;">
            @foreach (DateTime date in _dates)
            {
                <option value="@date">@date.ToString("yyyy-MM-dd")</option>
            }
        </InputSelect>

        <button class="btn btn-success" @onclick="ShowCreateModalAsync">Create workout</button>
    </div>

    <div class="mt-3">
        <div class="row mt-3">
            @foreach (WorkoutDto workout in _workouts)
            {
                <div class="col-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title fw-bold">@workout.Duration</h5>
                            <h6>@workout.DateTime</h6>
                            <hr/>
                            <span>
                                Exercise: @workout.Exercise.Name (@workout.Exercise.Category)
                                <br/>
                                Sets and reps: @workout.Sets x @workout.Reps
                            </span>
                            <hr/>
                            <div class="mt-3">
                                <button type="button" class="btn btn-primary" @onclick="() => ShowDetailsModal(workout)">
                                    <i class="bi bi-file-earmark-text"></i>
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="() => ShowUpdateModalAsync(workout)">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteModalAsync(workout.Id, workout.DateTime)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    [Inject] public IWorkoutService WorkoutService { get; set; } = default!;

    [Inject] public IToastService ToastService { get; set; } = default!;

    [CascadingParameter] public IModalService ModalService { get; set; } = default!;

    private IEnumerable<DateTime> _dates = new List<DateTime>();

    private DateTime _date;

    private List<WorkoutDto> _workouts = [];

    protected override async Task OnInitializedAsync()
    {
        await InitWorkoutDatesAsync();
        await GetWorkoutsAsync(_date);
    }

    private async Task InitWorkoutDatesAsync()
    {
        try
        {
            WorkoutDatesDto workoutDates = await WorkoutService.GetWorkoutDatesAsync();

            _dates = workoutDates.DateTimes.OrderByDescending(x => x.Date);

            _date = _dates.First();
        }
        catch (Exception)
        {
            ToastService.ShowError("Error loading workout dates");
        }
    }

    private async Task OnDateChangedAsync(DateTime dateTime)
    {
        _date = dateTime;

        await GetWorkoutsAsync(dateTime);
    }

    private async Task GetWorkoutsAsync(DateTime dateTime)
    {
        try
        {
            _workouts = (await WorkoutService.GetWorkoutsAsync(dateTime)).ToList();
        }
        catch (Exception)
        {
            ToastService.ShowError($"Error loading workouts for date {dateTime:yyyy-MM-dd}");
        }
    }

    private async Task ShowCreateModalAsync()
    {
        IModalReference modalReference = ModalService.Show<WorkoutCreateModal>("Create workout");

        ModalResult modalResult = await modalReference.Result;

        if (modalResult.Confirmed)
        {
            try
            {
                CreateWorkoutRequest request = (CreateWorkoutRequest)modalResult.Data!;

                await WorkoutService.CreateWorkoutAsync(request);

                await GetWorkoutsAsync(_date);

                ToastService.ShowInfo("Workout created");
            }
            catch (Exception)
            {
                ToastService.ShowError("Error creating workout");
            }
        }
    }

    private void ShowDetailsModal(WorkoutDto workout)
    {
        ModalService.Show<WorkoutDetailsModal>("Workout details",
            new ModalParameters().Add("Workout", workout),
            new ModalOptions { Size = ModalSize.Large });
    }

    private async Task ShowUpdateModalAsync(WorkoutDto workout)
    {
        IModalReference modalReference = ModalService.Show<WorkoutUpdateModal>("Update workout",
            new ModalParameters().Add("Workout", workout));

        ModalResult modalResult = await modalReference.Result;

        if (modalResult.Confirmed)
        {
            try
            {
                UpdateWorkoutRequest request = (UpdateWorkoutRequest)modalResult.Data!;

                await WorkoutService.UpdateWorkoutAsync(workout.Id, request);

                await GetWorkoutsAsync(_date);

                ToastService.ShowInfo("Workout updated");
            }
            catch (Exception)
            {
                ToastService.ShowError("Error updating workout");
            }
        }
    }

    private async Task ShowDeleteModalAsync(Guid workoutId, string workoutDate)
    {
        IModalReference modalReference = ModalService.Show<WorkoutDeleteModal>("Delete workout",
            new ModalParameters().Add("WorkoutDate", workoutDate));

        ModalResult modalResult = await modalReference.Result;

        if (modalResult.Confirmed)
        {
            try
            {
                await WorkoutService.DeleteWorkoutAsync(workoutId);

                await GetWorkoutsAsync(_date);

                ToastService.ShowInfo("Workout deleted");
            }
            catch (Exception)
            {
                ToastService.ShowError("Error deleting workout");
            }
        }
    }

}